#!/usr/bin/env bash

# Copyright 2022 The Dredd Project Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
set -u
set -x

DREDD_INSTALLED_EXECUTABLE="${DREDD_REPO_ROOT}/third_party/clang+llvm/bin/dredd"

# Move to the temporary directory
cd "${DREDD_REPO_ROOT}"
cd temp/

if [ -z "${DREDD_SKIP_COPY_EXECUTABLE+x}" ]
then
  # Ensure that Dredd is in its installed location. This depends on a
  # debug build being available
  cp build-Debug/src/dredd/dredd "${DREDD_INSTALLED_EXECUTABLE}"
fi

f="${DREDD_REPO_ROOT}/${1}"

# Copy the compile-execute-file test case to the temporary directory so
# that it can be mutated without affecting the original
cp "$f" .
copy_of_f=$(basename "$f")

# Mutate the test case using Dredd
${DREDD_INSTALLED_EXECUTABLE} --mutation-info-file temp.json "${copy_of_f}" --

# Check that the JSON generated by Dredd is valid
check_json.py temp.json

# Check that the mutated file compiles
if [[ $f == *.cc ]]
then
# Extra C++ arguments can be passed;
# this is needed on OSX to set an appropriate C++ standard.
if [ -z "${DREDD_EXTRA_CXX_ARGS+x}" ]
then
    ${CXX} "${copy_of_f}" -o "./${copy_of_f%.*}.o"
else
    ${CXX} "${DREDD_EXTRA_CXX_ARGS}" "${copy_of_f}" -o "./${copy_of_f%.*}.o"
fi
else
# Extra C arguments can be passed;
# this is needed on Windows to set an appropriate C standard.
if [ -z "${DREDD_EXTRA_C_ARGS+x}" ]
then
    ${CC} "${copy_of_f}" -o "./${copy_of_f%.*}.o"
else
    ${CC} "${DREDD_EXTRA_C_ARGS}" "${copy_of_f}" -o "./${copy_of_f%.*}.o"
fi
fi

# Apply mutation and check
for expected_output in "$f.*.expected"
do
    # Extract mutation id to apply
    mutation_id=$(echo $expected_output | awk -F '.' '{print $3}')

    # Execute binary with specified mutation
    chmod +x "${copy_of_f%.*}.o"
    DREDD_ENABLED_MUTATION="${mutation_id}" "./${copy_of_f%.*}.o" > ${copy_of_f}.actual

    # Compare actual output with expected output
    diff ${expected_output} ${copy_of_f}.actual

    rm ${copy_of_f}.actual
done


# Clean up
rm "${copy_of_f}"
# Account for the fact that the script may be running under various OSes
rm -f "${copy_of_f%.*}".o

# CHECK: WE MIGHT NOT NEED THIS, AS EVERYTHING IS OUTPUTED AS *.O
# rm -f "${copy_of_f%.*}".obj

